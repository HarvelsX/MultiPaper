From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Thu, 25 Nov 2021 15:19:41 +1000
Subject: [PATCH] Sync level.dat


diff --git a/src/main/java/net/minecraft/network/FriendlyByteBuf.java b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
index 293520339488fbae099d2ec727c0d8d176b71661..596afe3684994a0e7364c3629272a6e672b22367 100644
--- a/src/main/java/net/minecraft/network/FriendlyByteBuf.java
+++ b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
@@ -83,8 +83,10 @@ import org.joml.Quaternionf;
 import org.joml.Vector3f;
 
 import org.bukkit.craftbukkit.inventory.CraftItemStack; // CraftBukkit
+import puregero.multipaper.MultiPaper; // MultiPaper
 
-public class FriendlyByteBuf extends ByteBuf {
+public class
FriendlyByteBuf extends ByteBuf {
 
     private static final int MAX_VARINT_SIZE = 5;
     private static final int MAX_VARLONG_SIZE = 10;
diff --git a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
index ef8b794d1a017f02f90368a48cec2ea7bb57f218..693d50c9c3a5fca3e6176e45cf23f54db0059563 100644
--- a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -72,6 +72,7 @@ import net.minecraft.world.level.validation.DirectoryValidator;
 import net.minecraft.world.level.validation.ForbiddenSymlinkInfo;
 import net.minecraft.world.level.validation.PathAllowList;
 import org.slf4j.Logger;
+import puregero.multipaper.MultiPaper;
 
 public class LevelStorageSource {
 
@@ -255,12 +256,12 @@ public class LevelStorageSource {
 
     @Nullable
     <T> T readLevelData(LevelStorageSource.LevelDirectory levelSave, BiFunction<Path, DataFixer, T> levelDataParser) {
-        if (!Files.exists(levelSave.path(), new LinkOption[0])) {
+        if (false && !Files.exists(levelSave.path(), new LinkOption[0])) { // MultiPaper
             return null;
         } else {
             Path path = levelSave.dataFile();
 
-            if (Files.exists(path, new LinkOption[0])) {
+            if (true || Files.exists(path, new LinkOption[0])) { // MultiPaper
                 T t0 = levelDataParser.apply(path, this.fixerUpper);
 
                 if (t0 != null) {
@@ -298,11 +299,19 @@ public class LevelStorageSource {
             CompoundTag nbttagcompound;
 
             try {
-                nbttagcompound = NbtIo.readCompressed(path.toFile());
+                nbttagcompound = MultiPaper.readLevel(path.toFile().getParentFile().getName()); // NbtIo.readCompressed(path.toFile()); // MultiPaper
             } catch (IOException ioexception) {
                 throw new UncheckedIOException(ioexception);
             }
 
+            // MultiPaper start
+            if (nbttagcompound == null) {
+                LOGGER.info("A new level.dat is being generated at " + path.toFile().getPath() + ", forcing it to save");
+                MultiPaper.levelDatNeedsSaving = true;
+                return null;
+            }
+            // MultiPaper end
+
             CompoundTag nbttagcompound1 = nbttagcompound.getCompound("Data");
             CompoundTag nbttagcompound2 = nbttagcompound1.contains("Player", 10) ? nbttagcompound1.getCompound("Player") : null;
 
@@ -381,6 +390,7 @@ public class LevelStorageSource {
 
     @Nullable
     private static Tag readLightweightData(Path path) throws IOException {
+        if (true) return MultiPaper.readLevel(path.toFile().getParentFile().getName()); // MultiPaper
         SkipFields skipfields = new SkipFields(new FieldSelector[]{new FieldSelector("Data", CompoundTag.TYPE, "Player"), new FieldSelector("Data", CompoundTag.TYPE, "WorldGenSettings")});
 
         NbtIo.parseCompressed(path.toFile(), skipfields);
@@ -569,6 +579,13 @@ public class LevelStorageSource {
             nbttagcompound2.put("Data", nbttagcompound1);
 
             try {
+                // MultiPaper start
+                if (true) {
+                    MultiPaper.writeLevel(file.getName(), nbttagcompound2);
+                    return;
+                }
+                // MultiPaper end
+
                 File file1 = File.createTempFile("level", ".dat", file);
 
                 NbtIo.writeCompressed(nbttagcompound2, file1);
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index 4ceac2918126afc8f30743385171aaeea2d662ac..50495beaaedcc15185dc30bc5ec55bdf5bfb9e6f 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -17,6 +17,8 @@ import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.level.chunk.ImposterProtoChunk;
 import net.minecraft.world.level.chunk.LevelChunk;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 import org.bukkit.Bukkit;
 import org.bukkit.Chunk;
 import org.bukkit.World;
@@ -51,6 +53,8 @@ import java.util.zip.InflaterInputStream;
 public class MultiPaper {
 
     private static MultiPaperConnection multiPaperConnection = null;
+    private static final Logger LOGGER = LogManager.getLogger(MultiPaper.class.getSimpleName());
+    public static boolean levelDatNeedsSaving = false;
 
     public static MultiPaperConnection getConnection() {
         if (multiPaperConnection == null) {
@@ -78,6 +82,14 @@ public class MultiPaper {
                 server.getConnection().tick();
             }
         }
+
+        if (levelDatNeedsSaving) {
+            levelDatNeedsSaving = false;
+            LOGGER.info("A level.dat needs saving, all worlds are being force saved");
+            for (ServerLevel level : MinecraftServer.getServer().getAllLevels()) {
+                level.saveIncrementally(true);
+            }
+        }
     }
 
     public static void sendTickTime(long time, double tps) {
@@ -319,6 +331,18 @@ public class MultiPaper {
         writeRegionFile(world, path, cx, cz, nbtToBytes(compoundTag));
     }
 
+    public static CompoundTag readLevel(String world) throws IOException {
+        byte[] data = getConnection().sendAndAwaitReply(new ReadLevelMessage(world), DataMessageReply.class).thenApply(message -> message.data).join();
+
+        return data.length == 0 ? null : NbtIo.readCompressed(new ByteArrayInputStream(data));
+    }
+
+    public static void writeLevel(String world, CompoundTag compoundTag) throws IOException {
+        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
+        NbtIo.writeCompressed(compoundTag, buffer);
+        getConnection().send(new WriteLevelMessage(world, buffer.toByteArray()), message -> { /* do nothing */ });
+    }
+
     private static String getWorld(File path) {
         do {
             path = path.getParentFile();
