From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Mon, 15 Nov 2021 20:30:35 +1000
Subject: [PATCH] Add player syncing between servers


diff --git a/src/main/java/com/destroystokyo/paper/Metrics.java b/src/main/java/com/destroystokyo/paper/Metrics.java
index 82db269d5fcb304cc3e38c14adced776303ad633..6c74645f6ee61144d95d223bcc92d5fd9f3e90c2 100644
--- a/src/main/java/com/destroystokyo/paper/Metrics.java
+++ b/src/main/java/com/destroystokyo/paper/Metrics.java
@@ -604,7 +604,7 @@ public class Metrics {
                     return minecraftVersion;
                 }));
 
-                metrics.addCustomChart(new Metrics.SingleLineChart("players", () -> Bukkit.getOnlinePlayers().size()));
+                metrics.addCustomChart(new Metrics.SingleLineChart("players", () -> (int) Bukkit.getOnlinePlayers().stream().filter(MultiPaper::isRealPlayer).count())); // MultiPaper
                 metrics.addCustomChart(new Metrics.SimplePie("online_mode", () -> Bukkit.getOnlineMode() ? "online" : (io.papermc.paper.configuration.GlobalConfiguration.get().proxies.isProxyOnlineMode() ? "bungee" : "offline"))); // Purpur
                 metrics.addCustomChart(new Metrics.SimplePie("purpur_version", () -> (org.bukkit.craftbukkit.Main.class.getPackage().getImplementationVersion() != null) ? org.bukkit.craftbukkit.Main.class.getPackage().getImplementationVersion() : "unknown")); // Purpur
                 metrics.addCustomChart(new Metrics.SimplePie("multipaper_version", () -> (CraftServer.class.getPackage().getImplementationVersion() != null) ? CraftServer.class.getPackage().getImplementationVersion() : "unknown")); // MultiPaper
diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index b5cba37b65558c7cb0e82136a1822c0f88143053..c6c3b07333df2cfdb3ae59ca29f62c238b64f097 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -47,6 +47,7 @@ import org.apache.commons.lang3.Validate;
 import org.slf4j.Logger;
 import org.slf4j.Marker;
 import org.slf4j.MarkerFactory;
+import puregero.multipaper.MultiPaper;
 
 public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
 
@@ -655,6 +656,9 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
         this.preparing = false;
         clearPacketQueue(); // Paper
         // Spigot End
+        if (getPlayer() != null && getPlayer().hasRegisteredOnMaster) {
+            MultiPaper.sendPlayerDisconnect(getPlayer()); // MultiPaper
+        }
         if (this.channel == null) {
             this.delayedDisconnect = disconnectReason;
         }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 3557575f51d7f1a0ce54add649ffab2d5b5c5329..894881206b1d9b754e95bbd5d575fabb11f29de6 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1425,6 +1425,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             this.status = this.buildServerStatus();
         }
 
+        MultiPaper.tick(); // MultiPaper
+
         // Paper start - incremental chunk and player saving
         int playerSaveInterval = io.papermc.paper.configuration.GlobalConfiguration.get().playerAutoSave.rate;
         if (playerSaveInterval < 0) {
diff --git a/src/main/java/net/minecraft/server/level/ServerEntity.java b/src/main/java/net/minecraft/server/level/ServerEntity.java
index 1a4658db86e89d57b0a52923773a0983ff60989c..ef03e309ab6f551dafb58b0bdd7a613eaf3f83b7 100644
--- a/src/main/java/net/minecraft/server/level/ServerEntity.java
+++ b/src/main/java/net/minecraft/server/level/ServerEntity.java
@@ -46,6 +46,7 @@ import net.minecraft.server.network.ServerPlayerConnection;
 import net.minecraft.util.Mth;
 import org.bukkit.entity.Player;
 import org.bukkit.event.player.PlayerVelocityEvent;
+import puregero.multipaper.MultiPaper;
 // CraftBukkit end
 
 public class ServerEntity {
@@ -404,7 +405,7 @@ public class ServerEntity {
 
     private void broadcastAndSend(Packet<?> packet) {
         this.broadcast.accept(packet);
-        if (this.entity instanceof ServerPlayer) {
+        if (this.entity instanceof ServerPlayer && MultiPaper.isRealPlayer(this.entity)) { // MultiPaper - only send to real player
             ((ServerPlayer) this.entity).connection.send(packet);
         }
 
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index e0e133ab39548b8e671441e3383a6f4df6f6997e..30e326cacf6e5f6c723562fd0415874430e2c89c 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -10,6 +10,7 @@ import com.mojang.serialization.DataResult;
 import com.mojang.serialization.Dynamic;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
@@ -185,6 +186,12 @@ import org.bukkit.event.player.PlayerTeleportEvent;
 import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
 import org.bukkit.event.player.PlayerToggleSneakEvent;
 import org.bukkit.inventory.MainHand;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+import puregero.multipaper.externalserverprotocol.PlayerChangeDimensionPacket;
+import puregero.multipaper.externalserverprotocol.PlayerChangeGamemodePacket;
+import puregero.multipaper.externalserverprotocol.PlayerCreatePacket;
+import puregero.multipaper.externalserverprotocol.PlayerRemovePacket;
 // CraftBukkit end
 
 public class ServerPlayer extends Player {
@@ -237,6 +244,8 @@ public class ServerPlayer extends Player {
     private boolean textFilteringEnabled;
     private boolean allowsListing;
     public WardenSpawnTracker wardenSpawnTracker;
+    public boolean hasRegisteredOnMaster = false; // MultiPaper
+    public boolean didMultiPaperJoin = false; // MultiPaper
     public final ContainerSynchronizer containerSynchronizer;
     private final ContainerListener containerListener;
     @Nullable
@@ -244,7 +253,7 @@ public class ServerPlayer extends Player {
     private int containerCounter;
     public int latency;
     public boolean wonGame;
-    private int containerUpdateDelay; // Paper
+    public int containerUpdateDelay; // Paper // MultiPaper - make public
     public long loginTime; // Paper
     public int patrolSpawnDelay; // Paper - per player patrol spawns
     // Paper start - cancellable death event
@@ -1314,7 +1323,27 @@ public class ServerPlayer extends Player {
             }
             // Paper end
 
-            this.spawnInvulnerableTime = worldserver.purpurConfig.playerSpawnInvulnerableTicks; // Purpur
+            // MultiPaper start
+            ServerLevel destination = worldserver;
+            List<ExternalServerConnection> serversToCreatePlayerOn = new ArrayList<>();
+            MultiPaper.forEachExternalServer(externalServer -> {
+                if (externalServer.getConnection() != null && externalServer.getConnection().isOpen()) {
+                    boolean subscribedToSoruce = externalServer.getConnection().subscribedWorlds.contains(worldserver1.getWorld().getName());
+                    boolean subscribedToDestination = externalServer.getConnection().subscribedWorlds.contains(destination.getWorld().getName());
+
+                    if (subscribedToSoruce && subscribedToDestination) {
+                        externalServer.getConnection().send(new PlayerChangeDimensionPacket(this, false));
+                    } else if (subscribedToDestination) {
+                        serversToCreatePlayerOn.add(externalServer.getConnection());
+                    } else if (subscribedToSoruce) {
+                        externalServer.getConnection().send(new PlayerRemovePacket(this));
+                    }
+                }
+            });
+            PlayerCreatePacket.sendPlayer(this, serversToCreatePlayerOn.toArray(ExternalServerConnection[]::new));
+            // MultiPaper end
+            
+	    this.spawnInvulnerableTime = worldserver.purpurConfig.playerSpawnInvulnerableTicks; // Purpur
             return this;
         }
     }
@@ -2012,6 +2041,8 @@ public class ServerPlayer extends Player {
                 this.setCamera(this);
             }
 
+            MultiPaper.broadcastPacketToExternalServers(this, new PlayerChangeGamemodePacket(this)); // MultiPaper
+
             this.onUpdateAbilities();
             this.updateEffectVisibility();
             return event; // Paper
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index e76eaa121f73cc56b0e3445eb976546daef87f99..635cc5fc4b6c3b4fd88a6278a5b1ddea7bd53679 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -29,6 +29,8 @@ import java.util.function.UnaryOperator;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+
+import net.kyori.adventure.text.serializer.plain.PlainTextComponentSerializer;
 import net.minecraft.ChatFormatting;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
@@ -175,7 +177,6 @@ import net.minecraft.world.level.block.entity.CommandBlockEntity;
 import net.minecraft.world.level.block.entity.JigsawBlockEntity;
 import net.minecraft.world.level.block.entity.SignBlockEntity;
 import net.minecraft.world.level.block.entity.StructureBlockEntity;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.BlockHitResult;
@@ -225,7 +226,6 @@ import org.bukkit.event.inventory.InventoryCreativeEvent;
 import org.bukkit.event.inventory.InventoryType.SlotType;
 import org.bukkit.event.inventory.SmithItemEvent;
 import org.bukkit.event.player.AsyncPlayerChatEvent;
-import org.bukkit.event.player.PlayerAnimationEvent;
 import org.bukkit.event.player.PlayerAnimationType;
 import org.bukkit.event.player.PlayerChatEvent;
 import org.bukkit.event.player.PlayerCommandPreprocessEvent;
@@ -245,6 +245,9 @@ import org.bukkit.inventory.CraftingInventory;
 import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.SmithingInventory;
+import puregero.multipaper.ExternalPlayer;
+import puregero.multipaper.MultiPaper;
+import puregero.multipaper.externalserverprotocol.PlayerRemovePacket;
 // CraftBukkit end
 
 public class ServerGamePacketListenerImpl implements ServerPlayerConnection, TickablePacketListener, ServerGamePacketListener {
@@ -550,7 +553,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
 
         PlayerKickEvent event = new PlayerKickEvent(this.player.getBukkitEntity(), reason, leaveMessage, cause); // Paper - Adventure & kick event reason
 
-        if (this.cserver.getServer().isRunning()) {
+        boolean shouldKick = reason != PlayerRemovePacket.EXTERNAL_DISCONNECT_COMPONENT && !(reason == PlayerRemovePacket.LOGGED_IN_FROM_ANOTHER_LOCATION && this.player instanceof ExternalPlayer); // MultiPaper - don't run kick event for external disconnects
+        if (this.cserver.getServer().isRunning() && shouldKick && !PlainTextComponentSerializer.plainText().serialize(reason).startsWith("sendto:")) { // MultiPaper
             this.cserver.getPluginManager().callEvent(event);
         }
 
@@ -563,6 +567,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         // CraftBukkit end
 
         this.player.quitReason = org.bukkit.event.player.PlayerQuitEvent.QuitReason.KICKED; // Paper
+        if (shouldKick) // MultiPaper
         this.connection.send(new ClientboundDisconnectPacket(ichatbasecomponent), PacketSendListener.thenRun(() -> {
             this.connection.disconnect(ichatbasecomponent);
         }));
@@ -2213,7 +2218,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         this.player.disconnect();
         // Paper start - Adventure
         quitMessage = quitMessage == null ? this.server.getPlayerList().remove(this.player) : this.server.getPlayerList().remove(this.player, quitMessage); // Paper - pass in quitMessage to fix kick message not being used
-        if ((quitMessage != null) && !quitMessage.equals(net.kyori.adventure.text.Component.empty())) {
+        if ((quitMessage != null) && !quitMessage.equals(net.kyori.adventure.text.Component.empty()) && MultiPaper.isRealPlayer(this.player)) { // MultiPaper - Only run for real players
             this.server.getPlayerList().broadcastSystemMessage(PaperAdventure.asVanilla(quitMessage), false);
             // Paper end
         }
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index fb3a59fda3d4f5b2bca665b5665df2a355c61a15..25542cdb19b66881f127373bc6a6dab2e47514ae 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -15,6 +15,7 @@ import java.net.SocketAddress;
 import java.nio.file.Path;
 import java.text.SimpleDateFormat;
 import java.time.Instant;
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.EnumSet;
 import java.util.Iterator;
@@ -45,33 +46,7 @@ import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.chat.OutgoingChatMessage;
 import net.minecraft.network.chat.PlayerChatMessage;
 import net.minecraft.network.protocol.Packet;
-import net.minecraft.network.protocol.game.ClientboundChangeDifficultyPacket;
-import net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket;
-import net.minecraft.network.protocol.game.ClientboundEntityEventPacket;
-import net.minecraft.network.protocol.game.ClientboundGameEventPacket;
-import net.minecraft.network.protocol.game.ClientboundInitializeBorderPacket;
-import net.minecraft.network.protocol.game.ClientboundLoginPacket;
-import net.minecraft.network.protocol.game.ClientboundPlayerAbilitiesPacket;
-import net.minecraft.network.protocol.game.ClientboundPlayerInfoRemovePacket;
-import net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket;
-import net.minecraft.network.protocol.game.ClientboundRespawnPacket;
-import net.minecraft.network.protocol.game.ClientboundSetBorderCenterPacket;
-import net.minecraft.network.protocol.game.ClientboundSetBorderLerpSizePacket;
-import net.minecraft.network.protocol.game.ClientboundSetBorderSizePacket;
-import net.minecraft.network.protocol.game.ClientboundSetBorderWarningDelayPacket;
-import net.minecraft.network.protocol.game.ClientboundSetBorderWarningDistancePacket;
-import net.minecraft.network.protocol.game.ClientboundSetCarriedItemPacket;
-import net.minecraft.network.protocol.game.ClientboundSetChunkCacheRadiusPacket;
-import net.minecraft.network.protocol.game.ClientboundSetDefaultSpawnPositionPacket;
-import net.minecraft.network.protocol.game.ClientboundSetExperiencePacket;
-import net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket;
-import net.minecraft.network.protocol.game.ClientboundSetSimulationDistancePacket;
-import net.minecraft.network.protocol.game.ClientboundSetTimePacket;
-import net.minecraft.network.protocol.game.ClientboundSoundPacket;
-import net.minecraft.network.protocol.game.ClientboundUpdateEnabledFeaturesPacket;
-import net.minecraft.network.protocol.game.ClientboundUpdateMobEffectPacket;
-import net.minecraft.network.protocol.game.ClientboundUpdateRecipesPacket;
-import net.minecraft.network.protocol.game.ClientboundUpdateTagsPacket;
+import net.minecraft.network.protocol.game.*;
 import net.minecraft.network.protocol.status.ServerStatus;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.server.MinecraftServer;
@@ -130,6 +105,16 @@ import org.bukkit.event.player.PlayerRespawnEvent.RespawnReason;
 import org.bukkit.event.player.PlayerSpawnChangeEvent;
 // CraftBukkit end
 
+// MultiPaper start
+import puregero.multipaper.ExternalPlayer;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+import puregero.multipaper.externalserverprotocol.PlayerChangeDimensionPacket;
+import puregero.multipaper.externalserverprotocol.PlayerCreatePacket;
+import puregero.multipaper.externalserverprotocol.PlayerRemovePacket;
+import puregero.multipaper.externalserverprotocol.PlayerRespawnPacket;
+// MultiPaper end
+
 public abstract class PlayerList {
 
     public static final File USERBANLIST_FILE = new File("banned-players.json");
@@ -195,6 +180,20 @@ public abstract class PlayerList {
         GameProfileCache usercache = this.server.getProfileCache();
         String s;
 
+        // MultiPaper start
+        if (!MultiPaper.sendPlayerConnect(player).join()) {
+            Component chatmessage = Component.literal("You are already logged into another server.");
+            connection.send(new ClientboundDisconnectPacket(chatmessage));
+            connection.disconnect(chatmessage);
+            return;
+        }
+        player.hasRegisteredOnMaster = true;
+        if (!connection.isConnected()) {
+            MultiPaper.sendPlayerDisconnect(player); // MultiPaper
+            return;
+        }
+        // MultiPaper end
+
         if (usercache != null) {
             Optional<GameProfile> optional = usercache.get(gameprofile.getId());
 
@@ -597,11 +596,12 @@ public abstract class PlayerList {
             entityplayer.closeContainer(org.bukkit.event.inventory.InventoryCloseEvent.Reason.DISCONNECT); // Paper
         }
 
-        PlayerQuitEvent playerQuitEvent = new PlayerQuitEvent(entityplayer.getBukkitEntity(), leaveMessage, entityplayer.quitReason); // Paper - Adventure & quit reason
-        this.cserver.getPluginManager().callEvent(playerQuitEvent);
+
+        PlayerQuitEvent playerQuitEvent = new PlayerQuitEvent(entityplayer.getBukkitEntity(), leaveMessage, entityplayer.quitReason); // Paper - quit reason
+        if (MultiPaper.isRealPlayer(entityplayer)) this.cserver.getPluginManager().callEvent(playerQuitEvent); // MultiPaper - don't run for external players
         entityplayer.getBukkitEntity().disconnect(playerQuitEvent.getQuitMessage());
 
-        if (server.isSameThread()) entityplayer.doTick(); // SPIGOT-924 // Paper - don't tick during emergency shutdowns (Watchdog)
+        if (server.isSameThread() && MultiPaper.isRealPlayer(entityplayer)) entityplayer.doTick(); // SPIGOT-924 // Paper - don't tick during emergency shutdowns (Watchdog) // MultiPaper - don't run for external players
         // CraftBukkit end
 
         // Paper start - Remove from collideRule team if needed
@@ -676,6 +676,9 @@ public abstract class PlayerList {
         this.cserver.getScoreboardManager().removePlayer(entityplayer.getBukkitEntity());
         // CraftBukkit end
 
+
+        MultiPaper.onPlayerDisconnect(entityplayer); // MultiPaper
+
         return playerQuitEvent.quitMessage(); // Paper - Adventure
     }
 
@@ -798,6 +801,12 @@ public abstract class PlayerList {
 
     public ServerPlayer respawn(ServerPlayer entityplayer, ServerLevel worldserver, boolean flag, Location location, boolean avoidSuffocation, RespawnReason reason, org.bukkit.event.player.PlayerRespawnEvent.RespawnFlag...respawnFlags) {
         // Paper end
+        // Multipaper start
+        if (MultiPaper.isExternalPlayer(entityplayer)) {
+            ((ExternalPlayer) entityplayer).externalServerConnection.send(new PlayerRespawnPacket(entityplayer, worldserver, flag, location, avoidSuffocation, respawnFlags));
+            return entityplayer;
+        }
+        // MultiPaper end
         entityplayer.stopRiding(); // CraftBukkit
         this.players.remove(entityplayer);
         this.playersByName.remove(entityplayer.getScoreboardName().toLowerCase(java.util.Locale.ROOT)); // Spigot
@@ -981,6 +990,26 @@ public abstract class PlayerList {
         entityplayer1.spawnInvulnerableTime = entityplayer1.level().purpurConfig.playerSpawnInvulnerableTicks; // Purpur
 
         // CraftBukkit end
+
+        // MultiPaper start
+        List<ExternalServerConnection> serversToCreatePlayerOn = new ArrayList<>();
+        MultiPaper.forEachExternalServer(externalServer -> {
+            if (externalServer.getConnection() != null && externalServer.getConnection().isOpen()) {
+                boolean subscribedToSoruce = externalServer.getConnection().subscribedWorlds.contains(fromWorld.getName());
+                boolean subscribedToDestination = externalServer.getConnection().subscribedWorlds.contains(worldserver1.getWorld().getName());
+
+                if (subscribedToSoruce && subscribedToDestination) {
+                    externalServer.getConnection().send(new PlayerChangeDimensionPacket(entityplayer1, !flag));
+                } else if (subscribedToDestination) {
+                    serversToCreatePlayerOn.add(externalServer.getConnection());
+                } else if (subscribedToSoruce) {
+                    externalServer.getConnection().send(new PlayerRemovePacket(entityplayer1));
+                }
+            }
+        });
+        PlayerCreatePacket.sendPlayer(entityplayer1, serversToCreatePlayerOn.toArray(ExternalServerConnection[]::new));
+        // MultiPaper end
+
         return entityplayer1;
     }
 
@@ -991,6 +1020,20 @@ public abstract class PlayerList {
         this.sendPlayerPermissionLevel(player, i);
     }
 
+    // MultiPaper start - Add player manually
+    public void addPlayer(ServerPlayer player) {
+        players.add(player);
+        playersByUUID.put(player.getUUID(), player);
+        playersByName.put(player.getScoreboardName().toLowerCase(), player);
+    }
+
+    public void removePlayer(ServerPlayer player) {
+        players.remove(player);
+        playersByUUID.remove(player.getUUID());
+        playersByName.remove(player.getScoreboardName().toLowerCase());
+    }
+    // MultiPaper end
+
     public void tick() {
         if (++this.sendAllPlayerInfoIn > 600) {
             // CraftBukkit start
diff --git a/src/main/java/puregero/multipaper/ExternalPlayer.java b/src/main/java/puregero/multipaper/ExternalPlayer.java
new file mode 100644
index 0000000000000000000000000000000000000000..0ce5fa596c3c53c969b2c5e8f36c946990fbda5a
--- /dev/null
+++ b/src/main/java/puregero/multipaper/ExternalPlayer.java
@@ -0,0 +1,84 @@
+package puregero.multipaper;
+
+import com.mojang.authlib.GameProfile;
+import net.minecraft.network.Connection;
+import net.minecraft.network.PacketSendListener;
+import net.minecraft.network.protocol.Packet;
+import net.minecraft.network.protocol.PacketFlow;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.server.network.ServerGamePacketListenerImpl;
+import net.minecraft.world.level.GameType;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+
+import javax.annotation.Nullable;
+import java.net.InetSocketAddress;
+
+public class ExternalPlayer extends ServerPlayer {
+
+    private static final Logger LOGGER = LogManager.getLogger(ExternalPlayer.class.getSimpleName());
+    public ExternalServerConnection externalServerConnection;
+    private final InetSocketAddress address;
+    private boolean sendPackets = true;
+
+    public static ExternalPlayer create(ExternalServerConnection externalServerConnection, GameProfile gameProfile, String world, double x, double y, double z, float yaw, float pitch, GameType gamemode, InetSocketAddress address) {
+        return new ExternalPlayer(externalServerConnection, gameProfile, world, x, y, z, yaw, pitch, gamemode, address);
+    }
+
+    public ExternalPlayer(ExternalServerConnection externalServerConnection, GameProfile gameProfile, String world, double x, double y, double z, float yaw, float pitch, GameType gamemode, InetSocketAddress address) {
+        super(((CraftServer) Bukkit.getServer()).getServer(), ((CraftWorld) Bukkit.getWorld(world)).getHandle(), gameProfile);
+        this.externalServerConnection = externalServerConnection;
+        this.address = address;
+        this.isRealPlayer = true;
+        this.valid = true;
+        this.onGround = true;
+        connection = new ServerGamePacketListenerImpl(getServer(), new ExternalPlayerConnection(PacketFlow.CLIENTBOUND), this);
+        setPos(x, y, z);
+        setYRot(yaw);
+        setXRot(pitch);
+        getServer().getPlayerList().addPlayer(this);
+        ((ServerLevel) level()).addNewPlayer(this);
+        sendPackets = false;
+        containerMenu.transferTo(containerMenu, getBukkitEntity());
+        initInventoryMenu();
+        sendPackets = true;
+        gameMode.changeGameModeForPlayer(gamemode);
+        detectEquipmentUpdates();
+        this.server.getProfileCache().add(this.getGameProfile());
+    }
+
+    @Override
+    public void tick() {
+        // Don't tick
+    }
+
+    private class ExternalPlayerConnection extends Connection {
+        public ExternalPlayerConnection(PacketFlow side) {
+            super(side);
+            this.address = ExternalPlayer.this.address;
+        }
+
+        @Override
+        public void setReadOnly() {
+            // Do nothing
+        }
+ 
+        @Override
+        public boolean isConnected() {
+            return true;
+        }
+
+        @Override
+        public void send(Packet<?> packet, @Nullable PacketSendListener packetsendlistener) {
+            if (sendPackets) {
+
+            } else {
+//                LOGGER.info("Not sending packet " + packet.getClass().getSimpleName());
+            }
+        }
+    }
+}
diff --git a/src/main/java/puregero/multipaper/ExternalServerConnection.java b/src/main/java/puregero/multipaper/ExternalServerConnection.java
index 411dd31f7467769fbe0868c46244a219e1530b35..7dc391159a2a6d116fd3d1ea34d7b766f9add714 100644
--- a/src/main/java/puregero/multipaper/ExternalServerConnection.java
+++ b/src/main/java/puregero/multipaper/ExternalServerConnection.java
@@ -9,6 +9,8 @@ import io.netty.util.internal.SystemPropertyUtil;
 import net.minecraft.network.*;
 import net.minecraft.network.protocol.PacketFlow;
 import net.minecraft.network.protocol.handshake.ClientIntentionPacket;
+import net.minecraft.server.dedicated.DedicatedServer;
+import net.minecraft.server.level.ServerPlayer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import puregero.multipaper.config.MultiPaperConfiguration;
@@ -98,6 +100,17 @@ public class ExternalServerConnection extends ChannelInitializer<SocketChannel>
                 LOGGER.info("Using Minecraft's event loop");
             }
         }
+
+        // And when this closes
+        channel.closeFuture().addListener(future -> {
+            if (future.isDone()) {
+                for (ServerPlayer player : DedicatedServer.getServer().getPlayerList().players) {
+                    if (player instanceof ExternalPlayer && ((ExternalPlayer) player).externalServerConnection == this) {
+                        MultiPaper.runSync(() -> player.connection.disconnect("External server disconnected"));
+                    }
+                }
+            }
+        });
     }
 
     public Channel getChannel() {
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index e09ad91c4c33e1dce449a765bcce33cbe3bdcc95..049e94daaff596cb8fa0bc56ecd62189508a2439 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -1,9 +1,17 @@
 package puregero.multipaper;
 
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.entity.Entity;
+import org.bukkit.craftbukkit.entity.CraftEntity;
 import puregero.multipaper.externalserverprotocol.ExternalServerPacket;
+import puregero.multipaper.externalserverprotocol.PlayerCreatePacket;
+import puregero.multipaper.externalserverprotocol.PlayerRemovePacket;
+import puregero.multipaper.mastermessagingprotocol.messages.masterbound.PlayerConnectMessage;
+import puregero.multipaper.mastermessagingprotocol.messages.masterbound.PlayerDisconnectMessage;
 import puregero.multipaper.mastermessagingprotocol.messages.masterbound.StartMessage;
 import puregero.multipaper.mastermessagingprotocol.messages.masterbound.WriteTickTimeMessage;
+import puregero.multipaper.mastermessagingprotocol.messages.serverbound.BooleanMessageReply;
 
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
@@ -14,6 +22,7 @@ import java.util.function.Consumer;
 import java.util.function.Supplier;
 
 public class MultiPaper {
+
     private static MultiPaperConnection multiPaperConnection = null;
 
     public static MultiPaperConnection getConnection() {
@@ -24,10 +33,35 @@ public class MultiPaper {
         return multiPaperConnection;
     }
 
+    public static void tick() {
+        for (ServerPlayer player : MinecraftServer.getServer().getPlayerList().players) {
+            if (player instanceof ExternalPlayer externalPlayer) {
+                // Copied from Paper start - Configurable container update tick rate
+                if (externalPlayer.containerMenu != externalPlayer.inventoryMenu && --externalPlayer.containerUpdateDelay <= 0) {
+                    externalPlayer.containerMenu.broadcastChanges();
+                    externalPlayer.containerUpdateDelay = externalPlayer.level().paperConfig().tickRates.containerUpdate;
+                }
+                // Copied from Paper end
+            }
+        }
+    }
+
     public static void sendTickTime(long time, double tps) {
         getConnection().send(new WriteTickTimeMessage(time, (float) tps));
     }
 
+    public static CompletableFuture<Boolean> sendPlayerConnect(ServerPlayer player) {
+        CompletableFuture<Boolean> future = new CompletableFuture<>();
+        getConnection().send(new PlayerConnectMessage(player.getUUID()), message -> {
+            future.complete(((BooleanMessageReply) message).result);
+        });
+        return future;
+    }
+
+    public static void sendPlayerDisconnect(ServerPlayer player) {
+        getConnection().send(new PlayerDisconnectMessage(player.getUUID()));
+    }
+
     public static void onStart(SocketAddress bindAddress) {
         getConnection().send(new StartMessage(
                 System.getProperty("server.address", ((InetSocketAddress) bindAddress).getAddress().getHostAddress()),
@@ -75,4 +109,45 @@ public class MultiPaper {
             }
         });
     }
+
+    public static void broadcastPacketToExternalServers(ServerPlayer player, ExternalServerPacket packet) {
+        if (player instanceof ExternalPlayer || player.didMultiPaperJoin) {
+            broadcastPacketToExternalServers(player.level().getWorld().getName(), packet);
+        }
+    }
+
+    public static void onPlayerJoin(ServerPlayer player) {
+        player.didMultiPaperJoin = true;
+        PlayerCreatePacket.sendPlayer(player,
+                getConnection().getServersMap().values().stream()
+                        .map(ExternalServer::getConnection)
+                        .filter(connection -> connection != null && connection.isOpen() && connection.subscribedWorlds.contains(player.level().getWorld().getName()))
+                        .toArray(ExternalServerConnection[]::new)
+        );
+    }
+
+    public static void onPlayerDisconnect(ServerPlayer player) {
+        if (!(player instanceof ExternalPlayer) && player.didMultiPaperJoin) {
+            broadcastPacketToExternalServers(player, new PlayerRemovePacket(player));
+        }
+        if (MultiPaper.isRealPlayer(player)) {
+            sendPlayerDisconnect(player);
+        }
+    }
+
+    public static boolean isRealPlayer(Entity entity) {
+        return entity instanceof ServerPlayer && !(entity instanceof ExternalPlayer);
+    }
+
+    public static boolean isRealPlayer(org.bukkit.entity.Entity bukkitEntity) {
+        return isRealPlayer(((CraftEntity) bukkitEntity).getHandle());
+    }
+
+    public static boolean isExternalPlayer(Entity entity) {
+        return entity instanceof ExternalPlayer;
+    }
+
+    public static boolean isExternalPlayer(org.bukkit.entity.Entity bukkitEntity) {
+        return isExternalPlayer(((CraftEntity) bukkitEntity).getHandle());
+    }
 }
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index e3cf79d81b58fabeddf5f42a9351f36a5f2197be..10a45aba2d7fb538e76c7bc7889b52811278d255 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -14,6 +14,11 @@ public class ExternalServerPacketSerializer {
         addPacket(HelloPacket.class, HelloPacket::new);
         addPacket(SetCompressionPacket.class, SetCompressionPacket::new);
         addPacket(SubscribeToWorldPacket.class, SubscribeToWorldPacket::new);
+        addPacket(PlayerCreatePacket.class, PlayerCreatePacket::new);
+        addPacket(PlayerRemovePacket.class, PlayerRemovePacket::new);
+        addPacket(PlayerChangeGamemodePacket.class, PlayerChangeGamemodePacket::new);
+        addPacket(PlayerRespawnPacket.class, PlayerRespawnPacket::new);
+        addPacket(PlayerChangeDimensionPacket.class, PlayerChangeDimensionPacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, Function<FriendlyByteBuf, ExternalServerPacket> deserializer) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerChangeDimensionPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerChangeDimensionPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..cc2ce59e746f4aef42156f57cdf8d788f7ba1ac4
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerChangeDimensionPacket.java
@@ -0,0 +1,74 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.entity.Entity;
+import org.bukkit.Bukkit;
+import org.bukkit.World;
+import org.bukkit.craftbukkit.CraftWorld;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.util.UUID;
+
+public class PlayerChangeDimensionPacket extends ExternalServerPacket {
+
+    private final UUID uuid;
+    private final String world;
+    private final double x;
+    private final double y;
+    private final double z;
+    private final boolean reset;
+
+    public PlayerChangeDimensionPacket(ServerPlayer player, boolean reset) {
+        this.uuid = player.getUUID();
+        this.world = player.level().getWorld().getName();
+        this.x = player.getX();
+        this.y = player.getY();
+        this.z = player.getZ();
+        this.reset = reset;
+    }
+
+    public PlayerChangeDimensionPacket(FriendlyByteBuf in) {
+        uuid = in.readUUID();
+        world = in.readUtf();
+        x = in.readDouble();
+        y = in.readDouble();
+        z = in.readDouble();
+        reset = in.readBoolean();
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUUID(uuid);
+        out.writeUtf(world);
+        out.writeDouble(x);
+        out.writeDouble(y);
+        out.writeDouble(z);
+        out.writeBoolean(reset);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerLevel level = ((CraftWorld) Bukkit.getWorld(this.world)).getHandle();
+            ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+
+            // Remove from old world
+            player.remove(Entity.RemovalReason.DISCARDED);
+
+            player.setPosRaw(x, y, z);
+
+            if (reset) {
+                player.reset();
+            }
+
+            // Add to new world
+            player.setLevel(level);
+            player.unsetRemoved();
+            level.addRespawnedPlayer(player);
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerChangeGamemodePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerChangeGamemodePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..d6d16bfeec41efd36c15812249d40ba32db87f23
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerChangeGamemodePacket.java
@@ -0,0 +1,50 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.level.GameType;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.util.UUID;
+
+public class PlayerChangeGamemodePacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(PlayerChangeGamemodePacket.class.getSimpleName());
+
+    private final UUID uuid;
+    private final GameType gamemode;
+
+    public PlayerChangeGamemodePacket(ServerPlayer player) {
+        this.uuid = player.getUUID();
+        this.gamemode = player.gameMode.getGameModeForPlayer();
+    }
+
+    public PlayerChangeGamemodePacket(FriendlyByteBuf in) {
+        uuid = in.readUUID();
+        gamemode = GameType.byId(in.readByte());
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUUID(uuid);
+        out.writeByte(gamemode.getId());
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+
+            if (player == null) {
+                LOGGER.warn("Could not find player " + uuid);
+                return;
+            }
+
+            player.gameMode.changeGameModeForPlayer(gamemode);
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..d2661f84dbd996db81b6d8daffb7e0a276369a81
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
@@ -0,0 +1,109 @@
+package puregero.multipaper.externalserverprotocol;
+
+import com.mojang.authlib.GameProfile;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.level.GameType;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.event.player.PlayerKickEvent;
+import puregero.multipaper.ExternalPlayer;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
+import java.net.UnknownHostException;
+
+public class PlayerCreatePacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(PlayerCreatePacket.class.getSimpleName());
+
+    private final GameProfile gameProfile;
+    private final String world;
+    private final double x;
+    private final double y;
+    private final double z;
+    private final float yaw;
+    private final float pitch;
+    private final GameType gamemode;
+    private final byte[] ip;
+    private final short port;
+
+    private PlayerCreatePacket(ServerPlayer player) {
+        this.gameProfile = player.gameProfile;
+        this.world = player.level().getWorld().getName();
+        this.x = player.getX();
+        this.y = player.getY();
+        this.z = player.getZ();
+        this.yaw = player.getYRot();
+        this.pitch = player.getXRot();
+        this.gamemode = player.gameMode.getGameModeForPlayer();
+        this.ip = ((InetSocketAddress) player.connection.connection.address).getAddress().getAddress();
+        this.port = (short) ((InetSocketAddress) player.connection.connection.address).getPort();
+    }
+
+    public PlayerCreatePacket(FriendlyByteBuf in) {
+        gameProfile = in.readGameProfile();
+        world = in.readUtf();
+        x = in.readDouble();
+        y = in.readDouble();
+        z = in.readDouble();
+        yaw = in.readFloat();
+        pitch = in.readFloat();
+        gamemode = GameType.byId(in.readByte());
+        ip = in.readByteArray();
+        port = in.readShort();
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeGameProfile(gameProfile);
+        out.writeUtf(world);
+        out.writeDouble(x);
+        out.writeDouble(y);
+        out.writeDouble(z);
+        out.writeFloat(yaw);
+        out.writeFloat(pitch);
+        out.writeByte(gamemode.getId());
+        out.writeByteArray(ip);
+        out.writeShort(port);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        LOGGER.info("Adding player " + gameProfile.getName() + " (" + gameProfile.getId() + ")");
+        MultiPaper.runSync(() -> {
+            ServerPlayer existingPlayer = MinecraftServer.getServer().getPlayerList().getPlayer(gameProfile.getId());
+            if (existingPlayer != null) {
+                LOGGER.warn("Trying to add external player " + gameProfile.getName() + " (" + gameProfile.getId() + "), but they're already online as a " + existingPlayer.getClass().getSimpleName() + ", kicking them");
+                existingPlayer.connection.disconnect(PlayerRemovePacket.LOGGED_IN_FROM_ANOTHER_LOCATION, PlayerKickEvent.Cause.DUPLICATE_LOGIN);
+            }
+
+            InetSocketAddress address = null;
+            try {
+                address = new InetSocketAddress(InetAddress.getByAddress(ip), port & 0xFFFF);
+            } catch (UnknownHostException e) {
+                e.printStackTrace();
+            }
+
+            ExternalPlayer.create(connection, gameProfile, world, x, y, z, yaw, pitch, gamemode, address);
+        });
+    }
+
+    private static void send(ExternalServerPacket packet, ExternalServerConnection... connections) {
+        for (ExternalServerConnection connection : connections) {
+            connection.send(packet);
+        }
+    }
+
+    public static void sendPlayer(ServerPlayer player, ExternalServerConnection... connections) {
+        if (connections.length == 0) {
+            // Don't process packets if there's no one to send to
+            return;
+        }
+
+        send(new PlayerCreatePacket(player), connections);
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerRemovePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerRemovePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..d5853995ed4774799475e5f1c156d5814e524c9d
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerRemovePacket.java
@@ -0,0 +1,49 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.kyori.adventure.text.Component;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.event.player.PlayerKickEvent;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.util.UUID;
+
+public class PlayerRemovePacket extends ExternalServerPacket {
+
+    public static Component EXTERNAL_DISCONNECT_COMPONENT = Component.text("Disconnected from external server");
+    public static Component LOGGED_IN_FROM_ANOTHER_LOCATION = Component.text("Logged in from another location");
+    private static final Logger LOGGER = LogManager.getLogger(PlayerRemovePacket.class.getSimpleName());
+
+    private final UUID uuid;
+
+    public PlayerRemovePacket(ServerPlayer player) {
+        this.uuid = player.getUUID();
+    }
+
+    public PlayerRemovePacket(FriendlyByteBuf in) {
+        uuid = in.readUUID();
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUUID(uuid);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+
+            if (player == null) {
+                LOGGER.warn("Tried to remove a non-existent player with uuid " + uuid);
+                return;
+            }
+
+            player.connection.disconnect(EXTERNAL_DISCONNECT_COMPONENT, PlayerKickEvent.Cause.TIMEOUT);
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerRespawnPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerRespawnPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..731fab04494c154d9bb47de73946ea586622b592
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerRespawnPacket.java
@@ -0,0 +1,86 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.event.player.PlayerRespawnEvent;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.util.UUID;
+
+public class PlayerRespawnPacket extends ExternalServerPacket {
+
+    private final UUID uuid;
+    private final String world;
+    private final boolean alive;
+    private final double x;
+    private final double y;
+    private final double z;
+    private final float yaw;
+    private final float pitch;
+    private final boolean avoidSuffocation;
+    private final PlayerRespawnEvent.RespawnFlag[] respawnFlags;
+
+    public PlayerRespawnPacket(ServerPlayer player, ServerLevel worldserver, boolean alive, Location location, boolean avoidSuffocation, PlayerRespawnEvent.RespawnFlag[] respawnFlags) {
+        this.uuid = player.getUUID();
+        this.world = worldserver.convertable.getLevelId();
+        this.alive = alive;
+        this.x = location.getX();
+        this.y = location.getY();
+        this.z = location.getZ();
+        this.yaw = location.getYaw();
+        this.pitch = location.getPitch();
+        this.avoidSuffocation = avoidSuffocation;
+        this.respawnFlags = respawnFlags;
+    }
+
+    public PlayerRespawnPacket(FriendlyByteBuf in) {
+        uuid = in.readUUID();
+        world = in.readUtf();
+        alive = in.readBoolean();
+        x = in.readDouble();
+        y = in.readDouble();
+        z = in.readDouble();
+        yaw = in.readFloat();
+        pitch = in.readFloat();
+        avoidSuffocation = in.readBoolean();
+
+        respawnFlags = new PlayerRespawnEvent.RespawnFlag[in.readInt()];
+        for (int i = 0; i < respawnFlags.length; i++) {
+            respawnFlags[i] = PlayerRespawnEvent.RespawnFlag.valueOf(in.readUtf());
+        }
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUUID(uuid);
+        out.writeUtf(world);
+        out.writeBoolean(alive);
+        out.writeDouble(x);
+        out.writeDouble(y);
+        out.writeDouble(z);
+        out.writeFloat(yaw);
+        out.writeFloat(pitch);
+        out.writeBoolean(avoidSuffocation);
+
+        out.writeInt(respawnFlags.length);
+        for (PlayerRespawnEvent.RespawnFlag flag : respawnFlags) {
+            out.writeUtf(flag.name());
+        }
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            ServerLevel level = ((CraftWorld) Bukkit.getWorld(world)).getHandle();
+            ServerPlayer player = MinecraftServer.getServer().getPlayerList().getPlayer(uuid);
+
+            level.getServer().getPlayerList().respawn(player, level, alive, new Location(level.getWorld(), x, y, z, yaw, pitch), avoidSuffocation, PlayerRespawnEvent.RespawnReason.DEATH, respawnFlags);
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/SubscribeToWorldPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/SubscribeToWorldPacket.java
index 5cbf42b51d99d13545b17be258e52f0638d73ef9..a5b8ebe305701a9b927663ff4a70e06e042729e8 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/SubscribeToWorldPacket.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/SubscribeToWorldPacket.java
@@ -1,6 +1,7 @@
 package puregero.multipaper.externalserverprotocol;
 
 import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.level.ServerPlayer;
 import org.bukkit.Bukkit;
 import org.bukkit.World;
 import org.bukkit.craftbukkit.CraftWorld;
@@ -35,6 +36,10 @@ public class SubscribeToWorldPacket extends ExternalServerPacket {
     }
 
     private void onWorldSubscribe(ExternalServerConnection connection, CraftWorld craftWorld) {
-
+        for (ServerPlayer player : craftWorld.getHandle().players()) {
+            if (MultiPaper.isRealPlayer(player)) {
+                PlayerCreatePacket.sendPlayer(player, connection);
+            }
+        }
     }
 }
